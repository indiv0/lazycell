var searchIndex = JSON.parse('{\
"lazycell":{"doc":"This crate provides a `LazyCell` struct which acts as a…","i":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with mutable contents.",null,null],[3,"AtomicLazyCell","","A lazily filled and thread-safe `Cell`, with frozen…",null,null],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell",3]]],[11,"fill","","Put a value into this cell.",0,[[],["result",4]]],[11,"replace","","Put a value into this cell.",0,[[],["option",4]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of…",0,[[],["option",4]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the…",0,[[],["option",4]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of…",0,[[["fnonce",8]]]],[11,"borrow_mut_with","","Borrows the contents of this `LazyCell` mutably for the…",0,[[["fnonce",8]]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing…",0,[[],["result",4]]],[11,"try_borrow_mut_with","","Same as `borrow_mut_with`, but allows the initializing…",0,[[],["result",4]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[],["option",4]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[],["option",4]]],[18,"NONE","","An empty `AtomicLazyCell`.",1,null],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell",3]]],[11,"fill","","Put a value into this cell.",1,[[],["result",4]]],[11,"replace","","Put a value into this cell.",1,[[],["option",4]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of…",1,[[],["option",4]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[],["option",4]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[],["option",4]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"clone","","Create a clone of this `LazyCell`",0,[[],["lazycell",3]]],[11,"clone","","Create a clone of this `AtomicLazyCell`",1,[[],["atomiclazycell",3]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]]],"p":[[3,"LazyCell"],[3,"AtomicLazyCell"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);